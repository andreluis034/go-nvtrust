package attestation_test

import (
	"testing"

	attestation "github.com/confidentsecurity/go-nvtrust/pkg/gonvtrust/verifier/attestation"
	"github.com/stretchr/testify/assert"
)

func TestParseMeasurementRecord_OkExactSize(t *testing.T) {
	mr := []byte{
		0x01, 0x01, 0x33, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
	record, consumed, err := attestation.ParseMeasurement(mr)

	assert.NoError(t, err)
	assert.Equal(t, len(mr), consumed)

	assert.Equal(t, record.Index, uint8(1))
	assert.Equal(t, record.MrSpec, uint8(1))
}

func TestParseMeasurementRecord_OkLeftover(t *testing.T) {
	mr := []byte{
		0x01, 0x01, 0x33, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
	expectConsumed := 4 + 0x33

	record, consumed, err := attestation.ParseMeasurement(mr)
	assert.NoError(t, err)

	assert.Equal(t, expectConsumed, consumed)
	assert.NotEqual(t, len(mr), consumed)

	assert.Equal(t, record.Index, uint8(1))
	assert.Equal(t, record.MrSpec, uint8(1))
}

func TestParseMeasurementRecord_TooSmallForSize(t *testing.T) {
	mr := []byte{
		0x01, 0x01, 0x33,
	}

	_, _, err := attestation.ParseMeasurement(mr)
	assert.Error(t, err)
}

func TestParseMeasurementRecord_BufferTooSmall(t *testing.T) {
	mr := []byte{
		0x01, 0x01, 0x33, 0x00, 0x01,
	}

	_, _, err := attestation.ParseMeasurement(mr)
	assert.Error(t, err)
}

func TestParseMeasurementRecord_BadDmtf(t *testing.T) {
	mr := []byte{
		0x01, 0x01, 0x01, 0x00, 0x01,
	}

	_, _, err := attestation.ParseMeasurement(mr)
	assert.Error(t, err)
}

func TestParseDmtfMeasurement_Ok(t *testing.T) {
	dmtf := []byte{
		0x01, 0x30, 0x00, 0x0B, 0x42, 0x83, 0x6F, 0x56, 0xA7, 0x16, 0x2E, 0x63, 0xCB, 0x7A, 0x9F, 0x3E,
		0xE5, 0x6B, 0x03, 0x83, 0x25, 0xA9, 0x12, 0x14, 0x42, 0xFA, 0x2E, 0xF3, 0x41, 0x82, 0xF4, 0x62,
		0x81, 0x68, 0x01, 0x44, 0x8F, 0xA8, 0xF6, 0x79, 0x8D, 0x13, 0x14, 0x4A, 0x1B, 0x38, 0xBE, 0x97,
		0x18, 0x10, 0x58,
	}
	expectedvalue := []byte{
		0x0B, 0x42, 0x83, 0x6F, 0x56, 0xA7, 0x16, 0x2E, 0x63, 0xCB, 0x7A, 0x9F, 0x3E, 0xE5, 0x6B, 0x03,
		0x83, 0x25, 0xA9, 0x12, 0x14, 0x42, 0xFA, 0x2E, 0xF3, 0x41, 0x82, 0xF4, 0x62, 0x81, 0x68, 0x01,
		0x44, 0x8F, 0xA8, 0xF6, 0x79, 0x8D, 0x13, 0x14, 0x4A, 0x1B, 0x38, 0xBE, 0x97, 0x18, 0x10, 0x58,
	}
	mr, err := attestation.ParseDmtfMeasurement(dmtf)
	assert.NoError(t, err)
	assert.NotNil(t, mr)

	assert.Equal(t, uint8(1), mr.ValueType)
	assert.Equal(t, expectedvalue, mr.Value)
}
